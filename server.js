// ====================================================================
// === Shubhzone - рдореБрдЦреНрдп рд╕рд░реНрд╡рд░ (The Proxy) - v8.2 (Final Debug)    ===
// === рдХрд╛рдо: рд╡реАрдбрд┐рдпреЛ рдХреЛ рдЦреБрдж рд╕реНрдЯреНрд░реАрдо рдХрд░рдХреЗ рдпреВрдЬрд░ рдХреЛ рджрд┐рдЦрд╛рдирд╛ (рдмреНрд▓реЙрдХрд┐рдВрдЧ рдХреЛ рдмрд╛рдпрдкрд╛рд╕ рдХрд░рдирд╛) ===
// === тШЕтШЕтШЕ рд╕рдорд╛рдзрд╛рди: рд╕рд╛рдЗрд▓реЗрдВрдЯ рдПрд░рд░ рдХреЛ рдкрдХреЬрдиреЗ рдХреЗ рд▓рд┐рдП рдмреЗрд╣рддрд░ рд▓реЙрдЧрд┐рдВрдЧ тШЕтШЕтШЕ ===
// ====================================================================

const express = require('express');
const cors = require('cors');
const admin = require('firebase-admin');
const fetch = require('node-fetch');
const path = require('path');
const request = require('request');

const app = express();
const PORT = process.env.PORT || 3000;
app.use(cors());
app.use(express.static(path.join(__dirname, '')));

let db;

try {
    const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS);
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    db = admin.firestore();
    console.log('Firebase рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХрдиреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИред');
} catch (error) {
    console.error('Firebase Admin SDK рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error.message);
    db = null;
}

// рдкреНрд░реЙрдХреНрд╕реА Endpoint (рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ)
app.get('/api/stream', (req, res) => {
    const externalUrl = req.query.url;
    if (!externalUrl) return res.status(400).send('Error: URL is required.');
    console.log(`рдкреНрд░реЙрдХреНрд╕реА рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рдХрд╛ рдЕрдиреБрд░реЛрдз: ${externalUrl}`);
    try {
        req.pipe(request(externalUrl)).on('error', (err) => {
            console.error(`рдкреНрд░реЙрдХреНрд╕реА рдЕрдиреБрд░реЛрдз рдореЗрдВ рддреНрд░реБрдЯрд┐: ${externalUrl}`, err);
            res.status(500).send('Error: Failed to stream content.');
        }).pipe(res);
    } catch (error) {
        console.error(`рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рдкреНрд░реЙрдХреНрд╕реА рдореЗрдВ рдЧрдВрднреАрд░ рддреНрд░реБрдЯрд┐: ${externalUrl}`, error);
        res.status(500).send('Error: Stream failed unexpectedly.');
    }
});

// рдореАрдбрд┐рдпрд╛ рд▓рд╛рдиреЗ рд╡рд╛рд▓рд╛ API (тШЕ рд╕рд┐рд░реНрдл Error Logging рдореЗрдВ рдмрджрд▓рд╛рд╡ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ тШЕ)
app.get('/api/media-by-genre', async (req, res) => {
    if (!db) return res.status(503).json({ error: 'Database service is unavailable.' });
    
    try {
        const { genreId, mediaType } = req.query;
        if (!genreId || !mediaType) return res.status(400).json({ error: 'Genre ID рдФрд░ Media Type рджреЛрдиреЛрдВ реЫрд░реВрд░реА рд╣реИрдВ.' });
        
        const collectionName = mediaType === 'movie' ? 'Available_Movies' : 'Available_WebSeries';
        
        let query;
        const limit = 20;

        if (genreId === 'latest') {
            query = db.collection(collectionName).orderBy('releaseDate', 'desc').limit(limit);
        } else {
            const numericGenreId = parseInt(genreId);
            query = db.collection(collectionName).where('genres', 'array-contains', numericGenreId).orderBy('releaseDate', 'desc').limit(limit);
        }

        const snapshot = await query.get();
        
        let finalResults = [];
        snapshot.forEach(doc => finalResults.push(doc.data()));
        
        res.status(200).json({ results: finalResults });

    } catch (error) {
        // --- тШЕтШЕтШЕ рдореБрдЦреНрдп рдмрджрд▓рд╛рд╡ рдпрд╣рд╛рдБ рд╣реИ тШЕтШЕтШЕ ---
        // рдЕрдм рдПрд░рд░ рд▓реЙрдЧреНрд╕ рдореЗрдВ 100% рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛
        console.error("\n\n!!!!!!!!!!!!!!!!!!!!!!!!! FIREBASE QUERY FAILED !!!!!!!!!!!!!!!!!!!!!!!!!");
        console.error("рдпрд╣ рдПрдХ рдЧрдВрднреАрд░ рддреНрд░реБрдЯрд┐ рд╣реИ! рдЗрд╕рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ Firestore Index рдЧрд▓рдд рд╣реИ рдпрд╛ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред");
        console.error("ERROR CODE:", error.code);
        console.error("ERROR MESSAGE:", error.details || error.message);
        console.error("рдЕрдЧрд░ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдореИрд╕реЗрдЬ рдореЗрдВ рдЗрдВрдбреЗрдХреНрд╕ рдмрдирд╛рдиреЗ рдХрд╛ рд▓рд┐рдВрдХ рд╣реИ, рддреЛ рдЙрд╕ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n\n");
        // --- тШЕтШЕтШЕ рдмрджрд▓рд╛рд╡ рдЦрддреНрдо тШЕтШЕтШЕ ---
        
        res.status(500).json({ error: 'рд╕рд░реНрд╡рд░ рд╕реЗ рдореАрдбрд┐рдпрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓.', details: error.message });
    }
});

// TV Details API (рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ)
app.get('/api/tv-details', async (req, res) => {
    const { seriesId } = req.query;
    const TMDB_API_KEY = process.env.TMDB_API_KEY;
    if (!TMDB_API_KEY) return res.status(500).json({ error: 'TMDB API рдХреБрдВрдЬреА рд╕рд░реНрд╡рд░ рдкрд░ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ.' });
    if (!seriesId) return res.status(400).json({ error: 'Series ID реЫрд░реВрд░реА рд╣реИ.' });
    try {
        const url = `https://api.themoviedb.org/3/tv/${seriesId}?api_key=${TMDB_API_KEY}&language=en-US`;
        const tmdbResponse = await fetch(url);
        const data = await tmdbResponse.json();
        res.status(200).json(data);
    } catch (error) {
        console.error('TMDB рд╕реЗ рд╕реАрд░реАрдЬрд╝ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        res.status(500).json({ error: 'TMDB рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╕рд░реНрд╡рд░ рдкрд░ рддреНрд░реБрдЯрд┐.' });
    }
});

// YouTube API (рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ)
app.get('/api/youtube', async (req, res) => {
    // ... (рдЗрд╕ рдлрдВрдХреНрд╢рди рдореЗрдВ рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ рд╣реИ)
    if (!process.env.YOUTUBE_API_KEY) {
        return res.status(500).json({ error: 'YouTube API рдХреБрдВрдЬреА рд╕рд░реНрд╡рд░ рдкрд░ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ.' });
    }
    const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

    const { type, ...queryParams } = req.query;
    const baseUrl = 'https://www.googleapis.com/youtube/v3/';
    let apiUrl = '';

    const params = new URLSearchParams(queryParams);

    switch (type) {
        case 'search':
            apiUrl = `${baseUrl}search?part=snippet&key=${YOUTUBE_API_KEY}&${params.toString()}`;
            break;
        case 'playlists':
            apiUrl = `${baseUrl}playlists?part=snippet&key=${YOUTUBE_API_KEY}&${params.toString()}`;
            break;
        case 'videoDetails':
            apiUrl = `${baseUrl}videos?part=snippet,contentDetails&key=${YOUTUBE_API_KEY}&${params.toString()}`;
            break;
        default:
            return res.status(400).json({ error: 'рдЕрдорд╛рдиреНрдп YouTube API рдкреНрд░рдХрд╛рд░.' });
    }

    try {
        const youtubeResponse = await fetch(apiUrl);
        const data = await youtubeResponse.json();
        if (!youtubeResponse.ok || data.error) {
            console.error('YouTube API рд╕реЗ рддреНрд░реБрдЯрд┐:', data.error);
            return res.status(youtubeResponse.status).json({ error: data.error ? data.error.message : 'YouTube API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓.' });
        }
        res.status(200).json(data);
    } catch (error) {
        console.error('YouTube API рдХреЛ рдХреЙрд▓ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        res.status(500).json({ error: 'YouTube API рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╕рд░реНрд╡рд░ рдкрд░ рддреНрд░реБрдЯрд┐.' });
    }
});


// рдлрд╛рдЗрдирд▓ рд╕реЗрдЯрдЕрдк (рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ)
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.listen(PORT, () => {
    console.log('/////////////////////////////////////////////////////');
    if (db) {
        console.log(`===> ЁЯЪА Shubhzone рдкреНрд░реЙрдХреНрд╕реА рд╕рд░реНрд╡рд░ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪрд▓ рд░рд╣рд╛ рд╣реИ! ЁЯЪА`);
    } else {
        console.log(`===> тЪая╕П Shubhzone рд╕рд░реНрд╡рд░ рдЪрд▓ рд░рд╣рд╛ рд╣реИ, рд▓реЗрдХрд┐рди Firebase рд╕реЗ рдХрдиреЗрдХреНрдЯ рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛.`);
    }
    console.log(`===> рдкреЛрд░реНрдЯ ${PORT} рдкрд░ рд╕реБрдирд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ.`);
    console.log('/////////////////////////////////////////////////////');
});
