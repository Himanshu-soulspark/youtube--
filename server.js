// ====================================================================
// === Shubhzone - API Server (Node.js) - тШЕтШЕтШЕ FINAL SECURE VERSION тШЕтШЕтШЕ ===
// === тШЕтШЕтШЕ TMDb API рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕рдореЗрдВ реЫрд░реВрд░реА рдмрджрд▓рд╛рд╡ рдХрд┐рдП рдЧрдП рд╣реИрдВ тШЕтШЕтШЕ ===
// ====================================================================

// 1. рдЬрд╝рд░реВрд░реА рдкреИрдХреЗрдЬ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
const express = require('express');
const fetch = require('node-fetch');
const cors = require('cors');
const admin = require('firebase-admin');
const path = require('path');

// 2. Firebase рдПрдбрдорд┐рди рдХреЛ рд╢реБрд░реВ рдХрд░реЗрдВ
let db;
try {
    const serviceAccount = require('/etc/secrets/firebase-credentials.json');
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    db = admin.firestore();
    console.log("Firebase Admin SDK рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИред");
} catch (error) {
    console.error("Firebase Admin SDK рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓:", error.message);
    console.log("рдЪреЗрддрд╛рд╡рдиреА: рд╕рд░реНрд╡рд░ рдмрд┐рдирд╛ Firebase рдХреИрд╢рд┐рдВрдЧ рдХреЗ рдЪрд▓реЗрдЧрд╛ред");
}

// 3. рд╕рд░реНрд╡рд░ рд╕реЗрдЯрдЕрдк рдХрд░реЗрдВ
const app = express();
const port = process.env.PORT || 3000;
app.use(cors());

// 4. Render рдХреЗ Environment Variable рд╕реЗ рджреЛрдиреЛрдВ API рдХреБрдВрдЬрд┐рдпрд╛рдБ рдкрдврд╝реЗрдВ
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;
const TMDB_API_KEY = process.env.TMDB_API_KEY; // тШЕтШЕтШЕ рдирдпрд╛ рдмрджрд▓рд╛рд╡: TMDb рдХреА рдХреБрдВрдЬреА рдпрд╣рд╛рдБ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рдкрдврд╝реА рдЧрдИ

// ====================================================================
// === YouTube API рд░реВрдЯ (рдЗрд╕рдореЗрдВ рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ) ===
// ====================================================================
app.get('/api/youtube', async (req, res) => {
    if (!YOUTUBE_API_KEY) {
        console.error("рддреНрд░реБрдЯрд┐: YOUTUBE_API_KEY рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред");
        return res.status(500).json({ error: "рд╕рд░реНрд╡рд░ рдареАрдХ рд╕реЗ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИред YouTube API рдХреБрдВрдЬреА рдЧрд╛рдпрдм рд╣реИред" });
    }
    const { type, ...queryParams } = req.query;
    const safeParams = Object.keys(queryParams).sort().map(key =>
        `${key}=${queryParams[key]}`).join('&');
    const cacheKey = Buffer.from(`youtube_${type}_${safeParams}`).toString('base64');
    let cacheRef;
    if (db) {
        cacheRef = db.collection('api_cache').doc(cacheKey);
    }
    let youtubeApiUrl;
    const baseUrl = 'https://www.googleapis.com/youtube/v3/';
    switch (type) {
        case 'search':
            youtubeApiUrl = `${baseUrl}search?part=snippet&key=${YOUTUBE_API_KEY}&${safeParams}`;
            break;
        case 'playlists':
            youtubeApiUrl = `${baseUrl}playlists?part=snippet&key=${YOUTUBE_API_KEY}&${safeParams}`;
            break;
        default:
            youtubeApiUrl = `${baseUrl}videos?part=snippet,contentDetails&key=${YOUTUBE_API_KEY}&${safeParams}`;
    }
    try {
        console.log(`YouTube API рдХреЛ рдХреЙрд▓ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ (Type: ${type})ред`);
        const youtubeResponse = await fetch(youtubeApiUrl, { timeout: 8000 });
        if (!youtubeResponse.ok) { const errorBody = await youtubeResponse.text(); throw new Error(`YouTube API рдиреЗ рдПрд░рд░ рджрд┐рдпрд╛: ${youtubeResponse.statusText}`); }
        const data = await youtubeResponse.json();
        if (data.error) { throw new Error(`YouTube API рд╕реЗ рддреНрд░реБрдЯрд┐: ${data.error.message}`); }
        if (db && cacheRef) { await cacheRef.set({ data: data, timestamp: Date.now() }); console.log("YouTube API рдХреЙрд▓ рд╕рдлрд▓! рдбреЗрдЯрд╛ рдХреИрд╢ рдХрд┐рдпрд╛ рдЧрдпрд╛ред"); }
        return res.status(200).json(data);
    } catch (error) {
        console.warn(`YouTube API рдХреЙрд▓ рд╡рд┐рдлрд▓ рд╣реБрдИ: ${error.message}ред рдХреИрд╢ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред`);
        if (db && cacheRef) {
            try {
                const cachedDoc = await cacheRef.get();
                if (cachedDoc.exists) { console.log("рдмреИрдХрдЕрдк рдХреИрд╢ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ред"); return res.status(200).json(cachedDoc.data().data); }
                else { return res.status(503).json({ error: "Service unavailable and no cache found." }); }
            } catch (cacheError) { return res.status(500).json({ error: "API and cache both failed." }); }
        } else { return res.status(503).json({ error: "Service unavailable and caching is not configured." }); }
    }
});

// ====================================================================
// тШЕтШЕтШЕ рдирдпрд╛ реЫрд░реВрд░реА рдмрджрд▓рд╛рд╡: TMDb API рдХреЗ рд▓рд┐рдП рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдЯ тШЕтШЕтШЕ
// ====================================================================
app.get('/api/tmdb', async (req, res) => {
    // рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ TMDb API рдХреБрдВрдЬреА рдореМрдЬреВрдж рд╣реИ рдпрд╛ рдирд╣реАрдВ
    if (!TMDB_API_KEY) {
        console.error("рддреНрд░реБрдЯрд┐: TMDB_API_KEY рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред");
        return res.status(500).json({ error: "рд╕рд░реНрд╡рд░ рдареАрдХ рд╕реЗ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИред TMDb API рдХреБрдВрдЬреА рдЧрд╛рдпрдм рд╣реИред" });
    }

    // index.html рд╕реЗ рдЖрдиреЗ рд╡рд╛рд▓реЗ рдЕрдиреБрд░реЛрдз рд╕реЗ endpoint рдФрд░ рдмрд╛рдХреА рдкреИрд░рд╛рдореАрдЯрд░ рдирд┐рдХрд╛рд▓реЗрдВ
    const { endpoint, ...queryParams } = req.query;

    // рдЕрдЧрд░ endpoint рдирд╣реАрдВ рднреЗрдЬрд╛ рдЧрдпрд╛ рд╣реИ, рддреЛ рдПрд░рд░ рджреЗрдВ
    if (!endpoint) {
        return res.status(400).json({ error: "TMDb endpoint is required." });
    }

    // TMDb API рдХреЛ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП URL рддреИрдпрд╛рд░ рдХрд░реЗрдВ
    const paramsString = new URLSearchParams(queryParams).toString();
    
    // тШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕ рдпрд╣реА рдПрдХрдорд╛рддреНрд░ рдЬрд░реВрд░реА рдмрджрд▓рд╛рд╡ рд╣реИ тШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕ
    // рдпрд╣рд╛рдБ &language=hi-IN&region=IN рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИред 
    // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдЧрд╛ рдХрд┐ API рд╣рдореЗрд╢рд╛ рднрд╛рд░рдд рдХреЗ рд▓рд┐рдП рд╣рд┐рдВрджреА рдореЗрдВ рд░рд┐рдЬрд▓реНрдЯреНрд╕ рджреЗред
    const tmdbApiUrl = `https://api.themoviedb.org/3/${endpoint}?api_key=${TMDB_API_KEY}&language=hi-IN&region=IN&${paramsString}`;
    // тШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕ

    try {
        console.log(`TMDb API рдХреЛ рдХреЙрд▓ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ (Endpoint: ${endpoint})ред`);
        const tmdbResponse = await fetch(tmdbApiUrl);

        if (!tmdbResponse.ok) {
            const errorData = await tmdbResponse.json();
            console.error("TMDb API рд╕реЗ рддреНрд░реБрдЯрд┐:", errorData);
            return res.status(tmdbResponse.status).json(errorData);
        }

        const data = await tmdbResponse.json();

        // TMDb рд╕реЗ рдорд┐рд▓реЗ рдбреЗрдЯрд╛ рдХреЛ рд╕реАрдзреЗ index.html рдкрд░ рд╡рд╛рдкрд╕ рднреЗрдЬ рджреЗрдВ
        return res.status(200).json(data);

    } catch (error) {
        console.error("TMDb API рдХреЛ рдХреЙрд▓ рдХрд░рдиреЗ рдореЗрдВ рд╕рд░реНрд╡рд░ рдкрд░ рддреНрд░реБрдЯрд┐:", error);
        return res.status(500).json({ error: "Failed to fetch data from TMDb." });
    }

});
// тШЕтШЕтШЕ рдирдпрд╛ рдмрджрд▓рд╛рд╡ рдпрд╣рд╛рдБ рд╕рдорд╛рдкреНрдд рд╣реЛрддрд╛ рд╣реИ тШЕтШЕтШЕ
// ====================================================================

// 6. рд╕реНрдЯреИрдЯрд┐рдХ рдлрд╛рдЗрд▓реЗрдВ (рдЬреИрд╕реЗ index.html) рд╕рд░реНрд╡ рдХрд░реЗрдВ
const publicPath = path.join(__dirname, '');
app.use(express.static(publicPath));

// 7. рдХрд┐рд╕реА рднреА рдЕрдиреНрдп рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЗ рд▓рд┐рдП index.html рднреЗрдЬреЗрдВ
app.get('*', (req, res) => {
    res.sendFile(path.join(publicPath, 'index.html'));
});

// 8. рд╕рд░реНрд╡рд░ рд╢реБрд░реВ рдХрд░реЗрдВ
app.listen(port, () => {
    console.log("/////////////////////////////////////////////////////");
    console.log("===> ЁЯЪА Shubhzone рд╕рд░реНрд╡рд░ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪрд▓ рд░рд╣рд╛ рд╣реИ! ЁЯЪА");
    console.log(`===> рдкреЛрд░реНрдЯ ${port} рдкрд░ рд╕реБрдирд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред`);
    console.log("/////////////////////////////////////////////////////");
});
