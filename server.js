// ====================================================================
// === Shubhzone - YouTube API Server (Node.js) - тШЕтШЕтШЕ рд╣рд╛рдЗрдмреНрд░рд┐рдб 'рдСрд▓рд╡реЗрдЬ-рдСрди' рд╕рдВрд╕реНрдХрд░рдг тШЕтШЕтШЕ ===
// === тШЕтШЕтШЕ рдпрд╣ рд╕рдВрд╕реНрдХрд░рдг рд╣рдореЗрд╢рд╛ API рдХреЙрд▓ рдХрд░рддрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рд╡рд┐рдлрд▓рддрд╛ рдкрд░ рддреБрд░рдВрдд рдХреИрд╢ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИ тШЕтШЕтШЕ ===
// ====================================================================

// 1. рдЬрд╝рд░реВрд░реА рдкреИрдХреЗрдЬ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
const express = require('express');
const fetch = require('node-fetch');
const cors = require('cors');
const admin = require('firebase-admin');
const path = require('path');

// 2. Firebase рдПрдбрдорд┐рди рдХреЛ рд╢реБрд░реВ рдХрд░реЗрдВ
let db; 

try {
    const serviceAccount = require('/etc/secrets/firebase-credentials.json');
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    db = admin.firestore();
    console.log("Firebase Admin SDK рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИред");
} catch (error) {
    console.error("Firebase Admin SDK рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓:", error.message);
}

// 3. рд╕рд░реНрд╡рд░ рд╕реЗрдЯрдЕрдк рдХрд░реЗрдВ
const app = express();
const port = process.env.PORT || 3000;
app.use(cors());

// 4. Render рдХреЗ Environment Variable рд╕реЗ YouTube API рдХреБрдВрдЬреА рдкрдврд╝реЗрдВ
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// 5. рдореБрдЦреНрдп API рд░реВрдЯ
app.get('/api/youtube', async (req, res) => {
    if (!db || !YOUTUBE_API_KEY) {
        console.error("рддреНрд░реБрдЯрд┐: Firebase рдпрд╛ YouTube API рдХреБрдВрдЬреА рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИред");
        return res.status(500).json({ error: "рд╕рд░реНрд╡рд░ рдареАрдХ рд╕реЗ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИред" });
    }

    const { type, ...queryParams } = req.query;
    const safeParams = Object.keys(queryParams).sort().map(key => `${key}=${queryParams[key]}`).join('&');
    const cacheKey = Buffer.from(`${type}_${safeParams}`).toString('base64');
    const cacheRef = db.collection('youtube_cache').doc(cacheKey);

    // --- тШЕтШЕтШЕ рдирдпрд╛ рд╣рд╛рдЗрдмреНрд░рд┐рдб рд▓реЙрдЬрд┐рдХ: рд╣рдореЗрд╢рд╛ рдкрд╣рд▓реЗ рдирдИ API рдХреЙрд▓ рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ тШЕтШЕтШЕ ---
    let youtubeApiUrl;
    const baseUrl = 'https://www.googleapis.com/youtube/v3/';
    
    switch (type) {
        case 'search':
            youtubeApiUrl = `${baseUrl}search?part=snippet&key=${YOUTUBE_API_KEY}&${safeParams}`;
            break;
        case 'videoDetails':
            youtubeApiUrl = `${baseUrl}videos?part=snippet,contentDetails&key=${YOUTUBE_API_KEY}&${safeParams}`;
            break;
        case 'playlists':
            youtubeApiUrl = `${baseUrl}playlists?part=snippet&key=${YOUTUBE_API_KEY}&${safeParams}`;
            break;
        case 'playlistItems':
            youtubeApiUrl = `${baseUrl}playlistItems?part=snippet&key=${YOUTUBE_API_KEY}&${safeParams}`;
            break;
        default:
            youtubeApiUrl = `${baseUrl}videos?part=snippet,contentDetails&chart=mostPopular&regionCode=IN&maxResults=20&key=${YOUTUBE_API_KEY}`;
    }

    try {
        console.log(`YouTube API рдХреЛ рдХреЙрд▓ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ (Type: ${type})ред`);
        const youtubeResponse = await fetch(youtubeApiUrl, { timeout: 8000 }); // 8 рд╕реЗрдХрдВрдб рдХрд╛ рдЯрд╛рдЗрдордЖрдЙрдЯ
        
        if (!youtubeResponse.ok) {
            // рдЕрдЧрд░ YouTube рдХреЛрдИ рднреА рдПрд░рд░ рджреЗрддрд╛ рд╣реИ (рдЬреИрд╕реЗ 403, 500), рддреЛ рдЙрд╕реЗ рдПрдХ рд╡рд┐рдлрд▓рддрд╛ рдорд╛рдиреЗрдВ
            throw new Error(`YouTube API рдиреЗ рдПрд░рд░ рджрд┐рдпрд╛: ${youtubeResponse.statusText}`);
        }

        const data = await youtubeResponse.json();

        // рдЕрдЧрд░ рдбреЗрдЯрд╛ рдореЗрдВ рдХреЛрдИ рдПрд░рд░ рд╣реИ, рддреЛ рдЙрд╕реЗ рднреА рд╡рд┐рдлрд▓рддрд╛ рдорд╛рдиреЗрдВ
        if (data.error) {
            throw new Error(`YouTube API рд╕реЗ рддреНрд░реБрдЯрд┐: ${data.error.message}`);
        }

        // --- API рдХреЙрд▓ рд╕рдлрд▓ рд╣реЛрдиреЗ рдкрд░ ---
        // 1. рдирдП рдбреЗрдЯрд╛ рдХреЛ Firebase рдореЗрдВ рдХреИрд╢ рдХрд░реЗрдВ
        await cacheRef.set({
            data: data,
            timestamp: Date.now()
        });
        console.log(`API рдХреЙрд▓ рд╕рдлрд▓! рдбреЗрдЯрд╛ Firebase рдореЗрдВ рдХреИрд╢ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдФрд░ рднреЗрдЬрд╛ рдЧрдпрд╛ред`);
        // 2. рдирдП рдбреЗрдЯрд╛ рдХреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рднреЗрдЬреЗрдВ
        return res.status(200).json(data);

    } catch (error) {
        // --- тШЕтШЕтШЕ API рдХреЙрд▓ рд╡рд┐рдлрд▓ рд╣реЛрдиреЗ рдкрд░ (рдХрд┐рд╕реА рднреА рдХрд╛рд░рдг рд╕реЗ) тШЕтШЕтШЕ ---
        console.warn(`API рдХреЙрд▓ рд╡рд┐рдлрд▓ рд╣реБрдИ: ${error.message}ред рдЕрдм Firebase рдХреИрд╢ рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред`);
        
        try {
            const cachedDoc = await cacheRef.get();
            if (cachedDoc.exists) {
                console.log(`API рд╡рд┐рдлрд▓рддрд╛ рдХреЗ рдХрд╛рд░рдг рдмреИрдХрдЕрдк рдХреИрд╢ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЧрдпрд╛ред рдбреЗрдЯрд╛ Firebase рд╕реЗ рднреЗрдЬрд╛ рдЧрдпрд╛ред`);
                // рдЕрдЧрд░ рдХреИрд╢ рдЙрдкрд▓рдмреНрдз рд╣реИ, рддреЛ рдЙрд╕реЗ рднреЗрдЬреЗрдВ
                return res.status(200).json(cachedDoc.data().data);
            } else {
                // рдЕрдЧрд░ API рднреА рд╡рд┐рдлрд▓ рд╣реЛ рдЧрдИ рдФрд░ рдХреИрд╢ рднреА рдирд╣реАрдВ рд╣реИ, рддрдм рдПрд░рд░ рднреЗрдЬреЗрдВ
                console.error("API рд╡рд┐рдлрд▓ рд╣реЛ рдЧрдИ рдФрд░ рдЗрд╕ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рдХреИрд╢ рднреА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред");
                return res.status(503).json({ error: "Service unavailable and no cache found." });
            }
        } catch (cacheError) {
            console.error("API рд╡рд┐рдлрд▓рддрд╛ рдХреЗ рдмрд╛рдж рдХреИрд╢ рдкрдврд╝рдиреЗ рдореЗрдВ рднреА рддреНрд░реБрдЯрд┐:", cacheError);
            return res.status(500).json({ error: "API and cache both failed." });
        }
    }
});

// 6. рд╕реНрдЯреИрдЯрд┐рдХ рдлрд╛рдЗрд▓реЗрдВ рд╕рд░реНрд╡ рдХрд░реЗрдВ
const publicPath = path.join(__dirname, '');
app.use(express.static(publicPath));

// 7. рдХрд┐рд╕реА рднреА рдЕрдиреНрдп рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЗ рд▓рд┐рдП index.html рднреЗрдЬреЗрдВ
app.get('*', (req, res) => {
  res.sendFile(path.join(publicPath, 'index.html'));
});

// 8. рд╕рд░реНрд╡рд░ рд╢реБрд░реВ рдХрд░реЗрдВ
app.listen(port, () => {
    console.log("/////////////////////////////////////////////////////");
    console.log("===> ЁЯЪА Shubhzone рд╕рд░реНрд╡рд░ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪрд▓ рд░рд╣рд╛ рд╣реИ! ЁЯЪА");
    console.log(`===> рдкреЛрд░реНрдЯ ${port} рдкрд░ рд╕реБрдирд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред`);
    console.log("/////////////////////////////////////////////////////");
});
