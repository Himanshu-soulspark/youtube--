// ====================================================================
// === Shubhzone - рдореБрдЦреНрдп рд╕рд░реНрд╡рд░ (The Manager) v2.0 ===
// === рдХрд╛рдо: рдпреВрдЬрд░ рдХреЛ рдРрдк рджрд┐рдЦрд╛рдирд╛, рдбреЗрдЯрд╛рдмреЗрд╕ рдФрд░ API рд╕реЗ рдмрд╛рдд рдХрд░рдирд╛ ===
// ====================================================================

// 1. реЫрд░реВрд░реА рдЯреВрд▓реНрд╕ рдХреЛ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
const express = require('express');
const cors = require('cors');
const admin = 'firebase-admin';
const fetch = 'node-fetch';
const path = 'path';

// 2. Express рдРрдк рдХреЛ рд╢реБрд░реВ рдХрд░реЗрдВ
const app = express();
const PORT = process.env.PORT || 3000;
app.use(cors());
app.use(express.static(path.join(__dirname, ''))); // index.html рдЬреИрд╕реА рдлрд╛рдЗрд▓реЛрдВ рдХреЗ рд▓рд┐рдП

// 3. Firebase рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВ
// рдпрд╣ Render рдХреЗ Environment Variable рд╕реЗ рдЖрдкрдХреА Firebase Credentials рдЙрдард╛рдПрдЧрд╛
try {
  if (!process.env.FIREBASE_CREDENTIALS) {
    throw new Error('FIREBASE_CREDENTIALS рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ!');
  }
  const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS);
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
  const db = admin.firestore();
  console.log('Firebase рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХрдиреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИред');
} catch (error) {
  console.error('Firebase Admin SDK рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рдЧрдВрднреАрд░ рддреНрд░реБрдЯрд┐:', error.message);
}

// ====================================================================
// === API Endpoints (рдпрд╣реАрдВ рд╕реЗ рдРрдк рдХреЛ рд╕рд╛рд░рд╛ рдбреЗрдЯрд╛ рдорд┐рд▓рддрд╛ рд╣реИ) ===
// ====================================================================

// тШЕтШЕтШЕ рдирдпрд╛ рдФрд░ реЫрд░реВрд░реА API: рд╡рд░реНрдХрд┐рдВрдЧ рд▓рд┐рдВрдХ рд╡рд╛рд▓реА рдлрд┐рд▓реНрдореЗрдВ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд▓рд╛рдПрдЧрд╛ тШЕтШЕтШЕ
app.get('/api/get-available-movies', async (req, res) => {
  try {
    const moviesRef = db.collection('available_movies');
    // рд╣рд╛рд▓ рд╣реА рдореЗрдВ рдЪреЗрдХ рдХреА рдЧрдИ рдлрд┐рд▓реНрдореЛрдВ рдХреЛ рд╕рдмрд╕реЗ рдКрдкрд░ рджрд┐рдЦрд╛рдПрдЧрд╛
    const snapshot = await moviesRef.orderBy('lastChecked', 'desc').get();

    if (snapshot.empty) {
      return res.status(200).json([]);
    }

    const movies = [];
    snapshot.forEach(doc => {
      movies.push(doc.data());
    });

    res.status(200).json(movies);
  } catch (error) {
    console.error('Firebase рд╕реЗ рдлрд┐рд▓реНрдореЗрдВ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
    res.status(500).json({ error: 'рд╕рд░реНрд╡рд░ рд╕реЗ рдлрд┐рд▓реНрдореЗрдВ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
  }
});

// тШЕтШЕтШЕ рдирдпрд╛ API: рд▓реЛрдХрдкреНрд░рд┐рдп рд╡реЗрдм-рд╕реАрд░реАрдЬрд╝ TMDb рд╕реЗ рд▓рд╛рдПрдЧрд╛ тШЕтШЕтШЕ
app.get('/api/get-web-series', async (req, res) => {
  try {
    if (!process.env.TMDB_API_KEY) {
      return res.status(500).json({ error: 'TMDB API рдХреБрдВрдЬреА рд╕рд░реНрд╡рд░ рдкрд░ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред' });
    }
    const TMDB_API_KEY = process.env.TMDB_API_KEY;
    // 2021 рдХреЗ рдмрд╛рдж рдХреА, рднрд╛рд░рдд рдореЗрдВ рд▓реЛрдХрдкреНрд░рд┐рдп рд╡реЗрдм-рд╕реАрд░реАрдЬрд╝
    const seriesApiUrl = `https://api.themoviedb.org/3/discover/tv?api_key=${TMDB_API_KEY}&language=hi-IN&region=IN&sort_by=popularity.desc&primary_release_date.gte=2021-01-01&page=1`;
    
    const response = await fetch(seriesApiUrl);
    if (!response.ok) {
      throw new Error(`TMDb API рд╕реЗ рддреНрд░реБрдЯрд┐: ${response.statusText}`);
    }
    const data = await response.json();
    res.status(200).json(data);
  } catch (error) {
    console.error('TMDb рд╕реЗ рд╡реЗрдм-рд╕реАрд░реАрдЬрд╝ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
    res.status(500).json({ error: 'рд╕рд░реНрд╡рд░ рд╕реЗ рд╡реЗрдм-рд╕реАрд░реАрдЬрд╝ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
  }
});


// тШЕтШЕтШЕ рдлрд┐рдХреНрд╕ рдХрд┐рдпрд╛ рд╣реБрдЖ YouTube API: рдЕрдм рдпрд╣ рд╕рд╣реА рд╕реЗ рдХрд╛рдо рдХрд░реЗрдЧрд╛ тШЕтШЕтШЕ
app.get('/api/youtube', async (req, res) => {
  if (!process.env.YOUTUBE_API_KEY) {
    return res.status(500).json({ error: 'YouTube API рдХреБрдВрдЬреА рд╕рд░реНрд╡рд░ рдкрд░ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред' });
  }
  const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;
  
  const { type, ...queryParams } = req.query;
  const baseUrl = 'https://www.googleapis.com/youtube/v3/';
  let apiUrl = '';

  // URLSearchParams рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рдирд╛ реЫреНрдпрд╛рджрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рдФрд░ рднрд░реЛрд╕реЗрдордВрдж рд╣реИ
  const params = new URLSearchParams(queryParams);

  switch (type) {
    case 'search':
      apiUrl = `${baseUrl}search?part=snippet&key=${YOUTUBE_API_KEY}&${params.toString()}`;
      break;
    case 'playlists':
      apiUrl = `${baseUrl}playlists?part=snippet&key=${YOUTUBE_API_KEY}&${params.toString()}`;
      break;
    case 'videoDetails':
      apiUrl = `${baseUrl}videos?part=snippet,contentDetails&key=${YOUTUBE_API_KEY}&${params.toString()}`;
      break;
    default:
      return res.status(400).json({ error: 'рдЕрдорд╛рдиреНрдп YouTube API рдкреНрд░рдХрд╛рд░ред' });
  }

  try {
    const youtubeResponse = await fetch(apiUrl);
    const data = await youtubeResponse.json();

    if (!youtubeResponse.ok || data.error) {
      console.error('YouTube API рд╕реЗ рддреНрд░реБрдЯрд┐:', data.error);
      return res.status(youtubeResponse.status).json({ error: data.error.message || 'YouTube API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }

    res.status(200).json(data);
  } catch (error) {
    console.error('YouTube API рдХреЛ рдХреЙрд▓ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
    res.status(500).json({ error: 'YouTube API рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╕рд░реНрд╡рд░ рдкрд░ рддреНрд░реБрдЯрд┐ред' });
  }
});

// ====================================================================
// === рдлрд╛рдЗрдирд▓ рд╕реЗрдЯрдЕрдк: рдРрдк рдХреЛ рдЪрд▓рд╛рдирд╛ ===
// ====================================================================

// рдХрд┐рд╕реА рднреА рдФрд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЗ рд▓рд┐рдП index.html рднреЗрдЬреЗрдВ рддрд╛рдХрд┐ рдРрдк рд╕рд╣реА рд╕реЗ рд▓реЛрдб рд╣реЛ
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// рд╕рд░реНрд╡рд░ рдХреЛ рд╕реБрдирдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ
app.listen(PORT, () => {
  console.log('/////////////////////////////////////////////////////');
  console.log(`===> ЁЯЪА Shubhzone рд╕рд░реНрд╡рд░ v2.0 рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪрд▓ рд░рд╣рд╛ рд╣реИ! ЁЯЪА`);
  console.log(`===> рдкреЛрд░реНрдЯ ${PORT} рдкрд░ рд╕реБрдирд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред`);
  console.log('/////////////////////////////////////////////////////');
});
