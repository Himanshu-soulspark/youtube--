// ====================================================================
// === Shubhzone - рдореБрдЦреНрдп рд╕рд░реНрд╡рд░ (The Manager) v3.0 (Netflix Version) ===
// === рдХрд╛рдо: рдпреВрдЬрд░ рдХреЛ рдРрдк рджрд┐рдЦрд╛рдирд╛ рдФрд░ рдХреИрдЯреЗрдЧрд░реА рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ рдХрдВрдЯреЗрдВрдЯ рджреЗрдирд╛ ===
// ====================================================================

const express = require('express');
const cors = require('cors');
const admin = require('firebase-admin');
const fetch = require('node-fetch');
const path = require('path');

// Express рдРрдк рдХреЛ рд╢реБрд░реВ рдХрд░реЗрдВ
const app = express();
const PORT = process.env.PORT || 3000;
app.use(cors());
app.use(express.static(path.join(__dirname, '')));

let db;

// Firebase рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВ
try {
    if (!process.env.FIREBASE_CREDENTIALS) {
        throw new Error('FIREBASE_CREDENTIALS рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ!');
    }
    const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS);
    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    db = admin.firestore();
    console.log('Firebase рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХрдиреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИред');
} catch (error) {
    console.error('Firebase Admin SDK рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рдЧрдВрднреАрд░ рддреНрд░реБрдЯрд┐:', error.message);
}

// ====================================================================
// === API Endpoints (рдпрд╣реАрдВ рд╕реЗ рдРрдк рдХреЛ рд╕рд╛рд░рд╛ рдбреЗрдЯрд╛ рдорд┐рд▓рддрд╛ рд╣реИ) ===
// ====================================================================

// тШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕ
// тШЕтШЕтШЕ рдпрд╣реА рд╣реИ рд╡рд╣ рдирдпрд╛ рдФрд░ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА API рдЬреЛ рдиреЗрдЯрдлреНрд▓рд┐рдХреНрд╕ рдЬреИрд╕рд╛ рд▓реЗрдЖрдЙрдЯ рдмрдирд╛рдПрдЧрд╛ тШЕтШЕтШЕ
// тШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕтШЕ
app.get('/api/media-by-genre', async (req, res) => {
    try {
        const { genreId, mediaType } = req.query; // рд╣рдо index.html рд╕реЗ рдпреЗ рджреЛ рдЪреАрдЬреЗрдВ рдорд╛рдВрдЧреЗрдВрдЧреЗ

        // рдЕрдЧрд░ рдХреЛрдИ реЫрд░реВрд░реА рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рднреЗрдЬрддрд╛ рд╣реИ, рддреЛ рдПрд░рд░ рджреЗрдВ
        if (!genreId || !mediaType) {
            return res.status(400).json({ error: 'Genre ID рдФрд░ Media Type рджреЛрдиреЛрдВ реЫрд░реВрд░реА рд╣реИрдВред' });
        }

        // рддрдп рдХрд░реЗрдВ рдХрд┐ 'Movies' рдХрд▓реЗрдХреНрд╢рди рдореЗрдВ рдвреВрдВрдврдирд╛ рд╣реИ рдпрд╛ 'WebSeries' рдореЗрдВ
        const collectionName = mediaType === 'movies' ? 'Available_Movies' : 'Available_WebSeries';
        
        const mediaRef = db.collection(collectionName);
        
        // Firebase рд╕реЗ рдХрд╣реЗрдВ: "рдореБрдЭреЗ рдЗрд╕ рдХрд▓реЗрдХреНрд╢рди рдореЗрдВ рд╡реЛ рд╕рднреА рдЖрдЗрдЯрдо рджреЛ рдЬрд┐рдирдХреЗ 'genres' array рдореЗрдВ рдпрд╣ genreId рдореМрдЬреВрдж рд╣реИ"
        const snapshot = await mediaRef
            .where('genres', 'array-contains', parseInt(genreId)) // parseInt реЫрд░реВрд░реА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ genreId рдЯреЗрдХреНрд╕реНрдЯ рдореЗрдВ рдЖрддрд╛ рд╣реИ
            .limit(20) // рд╣рд░ рдХреИрдЯреЗрдЧрд░реА рдХреА рд╕рд┐рд░реНрдл 20 рдЖрдЗрдЯрдо рднреЗрдЬреЗрдВ рддрд╛рдХрд┐ рдРрдк рддреЗрдЬ рдЪрд▓реЗ
            .get();

        if (snapshot.empty) {
            return res.status(200).json([]);
        }

        const mediaList = [];
        snapshot.forEach(doc => {
            mediaList.push(doc.data());
        });

        res.status(200).json(mediaList);

    } catch (error) {
        console.error(`рдХреИрдЯреЗрдЧрд░реА рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ рдореАрдбрд┐рдпрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:`, error);
        res.status(500).json({ error: 'рд╕рд░реНрд╡рд░ рд╕реЗ рдореАрдбрд┐рдпрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }
});


// тШЕтШЕтШЕ YouTube API (рдЗрд╕рдореЗрдВ рдХреЛрдИ рдмрджрд▓рд╛рд╡ рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдпрд╣ рд╡реИрд╕реЗ рд╣реА рдХрд╛рдо рдХрд░реЗрдЧрд╛) тШЕтШЕтШЕ
app.get('/api/youtube', async (req, res) => {
    if (!process.env.YOUTUBE_API_KEY) {
        return res.status(500).json({ error: 'YouTube API рдХреБрдВрдЬреА рд╕рд░реНрд╡рд░ рдкрд░ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред' });
    }
    const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

    const { type, ...queryParams } = req.query;
    const baseUrl = 'https://www.googleapis.com/youtube/v3/';
    let apiUrl = '';

    const params = new URLSearchParams(queryParams);

    switch (type) {
        case 'search':
            apiUrl = `${baseUrl}search?part=snippet&key=${YOUTUBE_API_KEY}&${params.toString()}`;
            break;
        case 'playlists':
            apiUrl = `${baseUrl}playlists?part=snippet&key=${YOUTUBE_API_KEY}&${params.toString()}`;
            break;
        case 'videoDetails':
            apiUrl = `${baseUrl}videos?part=snippet,contentDetails&key=${YOUTUBE_API_KEY}&${params.toString()}`;
            break;
        default:
            return res.status(400).json({ error: 'рдЕрдорд╛рдиреНрдп YouTube API рдкреНрд░рдХрд╛рд░ред' });
    }

    try {
        const youtubeResponse = await fetch(apiUrl);
        const data = await youtubeResponse.json();

        if (!youtubeResponse.ok || data.error) {
            console.error('YouTube API рд╕реЗ рддреНрд░реБрдЯрд┐:', data.error);
            return res.status(youtubeResponse.status).json({ error: data.error ? data.error.message : 'YouTube API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
        }

        res.status(200).json(data);
    } catch (error) {
        console.error('YouTube API рдХреЛ рдХреЙрд▓ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        res.status(500).json({ error: 'YouTube API рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░рдиреЗ рдореЗрдВ рд╕рд░реНрд╡рд░ рдкрд░ рддреНрд░реБрдЯрд┐ред' });
    }
});

// ====================================================================
// === рдлрд╛рдЗрдирд▓ рд╕реЗрдЯрдЕрдк: рдРрдк рдХреЛ рдЪрд▓рд╛рдирд╛ ===
// ====================================================================

app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.listen(PORT, () => {
    console.log('/////////////////////////////////////////////////////');
    console.log(`===> ЁЯЪА Shubhzone рд╕рд░реНрд╡рд░ (Netflix Version) рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪрд▓ рд░рд╣рд╛ рд╣реИ! ЁЯЪА`);
    console.log(`===> рдкреЛрд░реНрдЯ ${PORT} рдкрд░ рд╕реБрдирд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред`);
    console.log('/////////////////////////////////////////////////////');
});
